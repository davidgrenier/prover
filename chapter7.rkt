(include-book "j-bob-lang" :dir :teachpacks)

(include-book "j-bob" :dir :teachpacks)

;(include-book "little-prover" :dir :teachpacks)

(defun defun.ctx? ()
  (J-Bob/define (prelude)
                '(((defun ctx? (x)
                     (if (atom x)
                         (equal x '?)
                         (if (ctx? (car x))
                             't
                             (ctx? (cdr x)))))
                   (size x)
                   ((A E A E) (size/cdr x))
                   ((A E A) (if-same (ctx? (car x)) 't))
                   ((A E Q) (size/car x))
                   ((A E) (if-true 't 'nil))
                   ((A) (if-same (atom x) 't))
                   ((Q) (natp/size x))
                   (() (if-true 't 'nil))))))

(defun defun.sub ()
  (J-Bob/define (defun.ctx?)
                '(((defun sub (x y)
                     (if (atom y)
                         (if (equal y '?) x y)
                         (cons (sub x (car y))
                               (sub x (cdr y)))))
                   (size y)
                   ((A E A) (size/cdr y))
                   ((A E Q) (size/car y))
                   ((A E) (if-true 't 'nil))
                   ((A) (if-same (atom y) 't))
                   ((Q) (natp/size y))
                   (() (if-true 't 'nil))))))

(defun dethm.ctx?/t ()
  (J-Bob/define (defun.sub)
                '(((dethm ctx?/t (x)
                          (if (ctx? x)
                              (equal (ctx? x) 't)
                              't))
                   (star-induction x)
                   ((A A 1) (ctx? x))
                   ((A A 1) (if-nest-A (atom x)
                                       (equal x '?)
                                       (if (ctx? (car x))
                                           't
                                           (ctx? (cdr x)))))
                   ((A Q) (ctx? x))
                   ((A Q) (if-nest-A (atom x)
                                       (equal x '?)
                                       (if (ctx? (car x))
                                           't
                                           (ctx? (cdr x)))))
                   ((A A 1 1) (equal-if x '?))
                   ((A A 1) (equal-same '?))
                   ((A A) (equal-same 't))
                   ((A) (if-same (equal x '?) 't))
                   ((E A A Q) (ctx? x))
                   ((E A A Q) (if-nest-E (atom x)
                                         (equal x '?)
                                         (if (ctx? (car x))
                                             't
                                             (ctx? (cdr x)))))
                   ((E) (if-same (ctx? (car x))
                                 (if (if (ctx? (car x))
                                         (equal (ctx? (car x)) 't)
                                         't)
                                     (if (if (ctx? (cdr x))
                                             (equal (ctx? (cdr x)) 't)
                                             't)
                                         (if (if (ctx? (car x))
                                                 't
                                                 (ctx? (cdr x)))
                                             (equal (ctx? x) 't)
                                             't)
                                         't)
                                     't)))
                   ((E A Q) (if-nest-A (ctx? (car x))
                                       (equal (ctx? (car x)) 't)
                                       't))
                   ((E A A A Q) (if-nest-A (ctx? (car x))
                                           't
                                           (ctx? (cdr x))))
                   ((E A A A) (if-true (equal (ctx? x) 't) 't))
                   ((E A A A) (equal-if (ctx? (car x)) 't))
                   ((E A A) (if-same (if (ctx? (cdr x))
                                         (equal (ctx? (cdr x)) 't)
                                         't) 't))
                   ((E A) (if-same (equal (ctx? (car x)) 't) 't))
                   ((E E Q) (if-nest-E (ctx? (car x))
                                       (equal (ctx? (car x)) 't)
                                       't))
                   ((E E A A Q) (if-nest-E (ctx? (car x))
                                           't
                                           (ctx? (cdr x))))
                   ((E E A) (if-same (ctx? (cdr x))
                                     (if (if (ctx? (cdr x))
                                             (equal (ctx? (cdr x)) 't)
                                             't)
                                         (if (ctx? (cdr x))
                                             (equal (ctx? x) 't)
                                             't)
                                         't)))
                   ((E E E A) (if-nest-E (ctx? (cdr x))
                                         (equal (ctx? x) 't)
                                         't))
                   ((E E E) (if-same (if (ctx? (cdr x))
                                         (equal (ctx? (cdr x)) 't)
                                         't)
                                     't))
                   ((E E) (if-true (if (ctx? (cdr x))
                                       (if (equal (ctx? (cdr x)) 't)
                                           (equal (ctx? x) 't)
                                           't)
                                       't)
                                   't))
                   ((E E A A A) (if-nest-A (ctx? (cdr x))
                                           (equal (ctx?) 't)
                                           't))
                   ((E E A A Q) (if-nest-A (ctx? (cdr x))
                                           (equal (ctx? (cdr x)) 't)
                                           't))
                  ((E E A A 1) (ctx? x))
                  ((E E A A 1) (if-nest-E (atom x)
                                          (equal (ctx? x) 't)
                                          (if (equal (ctx? (car x)) 't)
                                              't
                                              (ctx? (cdr x)))))
                  ((E E A A 1 E) (equal-if (ctx? (cdr x)) 't))
                  ((E E A A 1) (if-same (equal (ctx? (car x)) 't) 't))
                  ((E E A A) (equal-same 't))
                  ((E E A) (if-same (equal (ctx? (cdr x)) 't) 't))
                  ((E E) (if-same (ctx? (cdr x)) 't))
                  ((E) (if-same (ctx? (car x)) 't))
                  (() (if-same (atom x) 't))))))