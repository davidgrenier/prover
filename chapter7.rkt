(include-book "j-bob-lang" :dir :teachpacks)

(include-book "j-bob" :dir :teachpacks)

;(include-book "little-prover" :dir :teachpacks)

(defun defun.ctx? ()
  (J-Bob/define (prelude)
                '(((defun ctx? (x)
                     (if (atom x)
                         (equal x '?)
                         (if (ctx? (car x))
                             't
                             (ctx? (cdr x)))))
                   (size x)
                   ((A E A E) (size/cdr x))
                   ((A E A) (if-same (ctx? (car x)) 't))
                   ((A E Q) (size/car x))
                   ((A E) (if-true 't 'nil))
                   ((A) (if-same (atom x) 't))
                   ((Q) (natp/size x))
                   (() (if-true 't 'nil))))))

(defun defun.sub ()
  (J-Bob/define (defun.ctx?)
                '(((defun sub (x y)
                     (if (atom y)
                         (if (equal y '?) x y)
                         (cons (sub x (car y))
                               (sub x (cdr y)))))
                   (size y)
                   ((A E A) (size/cdr y))
                   ((A E Q) (size/car y))
                   ((A E) (if-true 't 'nil))
                   ((A) (if-same (atom y) 't))
                   ((Q) (natp/size y))
                   (() (if-true 't 'nil))))))