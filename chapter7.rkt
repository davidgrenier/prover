(include-book "j-bob-lang" :dir :teachpacks)

(include-book "j-bob" :dir :teachpacks)

;(include-book "little-prover" :dir :teachpacks)

(defun defun.ctx? ()
  (J-Bob/define (prelude)
                '(((defun ctx? (x)
                     (if (atom x)
                         (equal x '?)
                         (if (ctx? (car x))
                             't
                             (ctx? (cdr x)))))
                   (size x)
                   ((A E A E) (size/cdr x))
                   ((A E A) (if-same (ctx? (car x)) 't))
                   ((A E Q) (size/car x))
                   ((A E) (if-true 't 'nil))
                   ((A) (if-same (atom x) 't))
                   ((Q) (natp/size x))
                   (() (if-true 't 'nil))))))

(defun defun.sub ()
  (J-Bob/define (defun.ctx?)
                '(((defun sub (x y)
                     (if (atom y)
                         (if (equal y '?)
                             x
                             y)
                         (cons (sub x (car y))
                               (sub x (cdr y)))))
                   (size y)
                   ((A E A) (size/cdr y))
                   ((A E Q) (size/car y))
                   ((A E) (if-true 't 'nil))
                   ((A) (if-same (atom y) 't))
                   ((Q) (natp/size y))
                   (() (if-true 't 'nil))))))

(defun dethm.ctx?/t ()
  (J-Bob/define (defun.sub)
                '(((dethm ctx?/t (x)
                          (if (ctx? x)
                              (equal (ctx? x) 't)
                              't))
                   (star-induction x)
                   ((A Q) (ctx? x))
                   ((A Q) (if-nest-A (atom x)
                                     (equal x '?)
                                     (if (ctx? (car x))
                                         't
                                         (ctx? (cdr x)))))
                   ((A A 1) (ctx? x))
                   ((A A 1) (if-nest-A (atom x)
                                       (equal x '?)
                                       (if (ctx? (car x))
                                           't
                                           (ctx? (cdr x)))))
                   ((A A 1 1) (equal-if x '?))
                   ((A A 1) (equal-same '?))
                   ((A A) (equal-same 't))
                   ((A) (if-same (equal x '?) 't))
                   ((E A A A 1) (ctx? x))
                   ((E A A A 1) (if-nest-E (atom x)
                                           (equal x '?)
                                           (if (ctx? (car x))
                                               't
                                               (ctx? (cdr x)))))
                   ((E) (if-same (ctx? (car x))
                                 (if (if (ctx? (car x))
                                         (equal (ctx? (car x)) 't)
                                         't)
                                     (if (if (ctx? (cdr x))
                                             (equal (ctx? (cdr x)) 't)
                                             't)
                                         (if (ctx? x)
                                             (equal (if (ctx? (car x))
                                                        't
                                                        (ctx? (cdr x))) 't)
                                             't)
                                         't)
                                     't)))
                   ((E A A A A 1) (if-nest-A (ctx? (car x)) 't (ctx? (cdr x))))
                   ((E A A A A) (equal-same 't))
                   ((E A A A) (if-same (ctx? x) 't))
                   ((E A A) (if-same (if (ctx? (cdr x))
                                         (equal (ctx? (cdr x)) 't)
                                         't) 't))
                   ((E A) (if-same (if (ctx? (car x))
                                       (equal (ctx? (car x)) 't)
                                       't) 't))
                   ((E E A A A 1) (if-nest-E (ctx? (car x)) 't (ctx? (cdr x))))
                   ((E E Q) (if-nest-E (ctx? (car x)) (equal (ctx? (car x)) 't) 't))
                   ((E E) (if-true (if (if (ctx? (cdr x))
                                           (equal (ctx? (cdr x)) 't)
                                           't)
                                       (if (ctx? x)
                                           (equal (ctx? (cdr x)) 't)
                                           't)
                                       't) 't))
                   ((E E) (if-same (ctx? (cdr x))
                                   (if (if (ctx? (cdr x))
                                           (equal (ctx? (cdr x)) 't)
                                           't)
                                       (if (ctx? x)
                                           (equal (ctx? (cdr x)) 't)
                                           't)
                                       't)))
                   ((E E A Q) (if-nest-A (ctx? (cdr x))
                                       (equal (ctx? (cdr x)) 't)
                                       't))
                   ((E E A A A 1) (equal-if (ctx? (cdr x)) 't))
                   ((E E A A A) (equal-same 't))
                   ((E E A A) (if-same (ctx? x) 't))
                   ((E E A) (if-same (equal (ctx? (cdr x)) 't) 't))
                   ((E E E A Q) (ctx? x))
                   ((E E E A Q) (if-nest-E (atom x)
                                           (equal x '?)
                                           (if (ctx? (car x))
                                               't
                                               (ctx? (cdr x)))))
                   ((E E E A Q) (if-nest-E (ctx? (car x)) 't (ctx? (cdr x))))
                   ((E E E A) (if-nest-E (ctx? (cdr x)) (equal (ctx? (cdr x)) 't) 't))
                   ((E E E) (if-same (if (ctx? (cdr x))
                                         (equal (ctx? (cdr x)) 't)
                                         't) 't))
                   ((E E) (if-same (ctx? (cdr x)) 't))
                   ((E) (if-same (ctx? (car x)) 't))
                   (() (if-same (atom x) 't))))))

(defun dethm.ctx?/sub ()
  (J-Bob/define (ctx?/t)
                '(((dethm ctx?/sub (x y)
                          (if (ctx? x)
                              (if (ctx? y)
                                  (equal (ctx? (sub x y)) 't)
                                  't)
                              't))
                   (star-induction y)
                   (() (if-same (ctx? x)
                                (if (atom x)
                                    (if (ctx? x)
                                        (if (ctx? y)
                                            (equal (ctx? (sub x y)) 't)
                                            't)
                                        't)
                                    (if (if (ctx? x)
                                            (if (ctx? (car y))
                                                (equal (ctx? (sub x (car y))) 't)
                                                't)
                                            't)
                                        (if (if (ctx? x)
                                                (if (ctx? (cdr y))
                                                    (equal (ctx? (sub x (cdr y))) 't)
                                                    't)
                                                't)
                                            (if (ctx? x)
                                                (if (ctx? y)
                                                    (equal (ctx? (sub x y)) 't)
                                                    't)
                                                't)
                                            't)
                                        't))))
                   ((E A) (if-nest-E (ctx? x) (if (ctx? y)
                                                  (equal (ctx? (sub x y)) 't)
                                                  't) 't))
                   ((E E A A) (if-nest-E (ctx? x) (if (ctx? y)
                                                      (equal (ctx? (sub x y)) 't)
                                                      't) 't))
                   ((E E A) (if-same (if (ctx? x)
                                         (if (ctx? (cdr y))
                                             (equal (ctx? (sub x (cdr y))) 't)
                                             't)
                                         't) 't))
                   ((E E) (if-same (if (ctx? x)
                                       (if (ctx? (car y))
                                           (equal (ctx? (sub x (car y))) 't)
                                           't)
                                       't) 't))
                   ((E) (if-same (atom y) 't))
                   ((A A) (if-nest-A (ctx? x) (if (ctx? y)
                                                  (equal (ctx? (sub x y)) 't)
                                                  't) 't))
                   ((A E Q) (if-nest-A (ctx? x) (if (ctx? (car y))
                                                    (equal (ctx? (sub x (car y))) 't)
                                                    't) 't))
                   ((A E A Q) (if-nest-A (ctx? x) (if (ctx? (cdr y))
                                                      (equal (ctx? (sub x (cdr y))) 't)
                                                      't) 't))
                   ((A E A A) (if-nest-A (ctx? x) (if (ctx? y)
                                                      (equal (ctx? (sub x y)) 't)
                                                      't) 't))
                   ((A A A 1 1) (sub x y))
                   ((A A A 1 1) (if-nest-A (atom y)
                                           (if (equal y '?) x y)
                                           (cons (sub x (car y))
                                                 (sub x (cdr y)))))
                   ((A A Q) (ctx? y))
                   ((A A Q) (if-nest-A (atom y)
                                       (equal y '?)
                                       (if (ctx? (car y))
                                           't
                                           (ctx? (cdr y)))))
                   ((A A A 1 1) (if-nest-A (equal y '?) x y))
                   ((A A A) (ctx?/t x))
                   ((A A) (if-same (equal y '?) 't))
                   ((A E) (if-same (ctx? (car y))
                                   (if (if (ctx? (car y))
                                           (equal (ctx? (sub x (car y))) 't)
                                           't)
                                       (if (if (ctx? (cdr y))
                                               (equal (ctx? (sub x (cdr y))) 't)
                                               't)
                                           (if (ctx? y)
                                               (equal (ctx? (sub x y)) 't)
                                               't)
                                           't)
                                       't)))
                    ((A E A Q) (if-nest-A (ctx? (car y))
                                          (equal (ctx? (sub x (car y))) 't)
                                          't))
                    ((A E A A A A 1 1) (sub x y))
                    ((A E A A A A 1 1) (if-nest-E (atom y)
                                                  (if (equal y '?) x y)
                                                  (cons (sub x (car y))
                                                        (sub x (cdr y)))))
                    ((A E A A A A 1) (ctx? (cons (sub x (car y))
                                                 (sub x (cdr y)))))
                    ((A E A A A A 1 Q) (atom/cons (sub x (car y))
                                                  (sub x (cdr y))))
                    ((A E A A A A 1) (if-false (equal y '?)
                                               (if (ctx? (car (cons (sub x (car y))
                                                                    (sub x (cdr y)))))
                                                   't
                                                   (ctx? (cdr (cons (sub x (car y))
                                                                    (sub x (cdr y))))))))
                    ((A E A A A A 1 Q 1) (car/cons (sub x (car y)) (sub x (cdr y))))
                    ((A E A A A A 1 Q) (equal-if (ctx? (sub x (car y))) 't))
                    ((A E A A A A 1) (if-true 't (ctx? (cdr (cons (sub x (car y))
                                                                  (sub x (cdr y)))))))
                    ((A E A A A A) (equal-same 't))
                    ((A E A A A) (if-same (ctx? y) 't))
                    ((A E A A) (if-same (if (ctx? (cdr y))
                                              (equal (ctx? (sub x (cdr y))) 't)
                                              't) 't))
                    ((A E A) (if-same (equal (ctx? (sub x (car y))) 't) 't))
                    ((A E E Q) (if-nest-E (ctx? (car y)) (equal (ctx? (sub x (car y))) 't) 't))
                    ((A E E) (if-true (if (if (ctx? (cdr y))
                                              (equal (ctx? (sub x (cdr y))) 't)
                                              't)
                                          (if (ctx? y)
                                              (equal (ctx? (sub x y)) 't)
                                              't)
                                          't) 't))
                    ((A E E) (if-same (ctx? (cdr y))
                                      (if (if (ctx? (cdr y))
                                              (equal (ctx? (sub x (cdr y))) 't)
                                              't)
                                          (if (ctx? y)
                                              (equal (ctx? (sub x y)) 't)
                                              't)
                                          't)))
                    ((A E E A Q) (if-nest-A (ctx? (cdr y)) (equal (ctx? (sub x (cdr y))) 't) 't))
                    ((A E E A A A 1 1) (sub x y))
                    ((A E E A A A 1 1) (if-nest-E (atom y)
                                                (if (equal y '?) x y)
                                                (cons (sub x (car y))
                                                      (sub x (cdr y)))))
                    ((A E E A A A 1) (ctx? (cons (sub x (car y))
                                               (sub x (cdr y)))))
                    ((A E E A A A 1 Q) (atom/cons (sub x (car y)) (sub x (cdr y))))
                    ((A E E A A A 1) (if-false (equal (cons (sub x (car y))
                                                          (sub x (cdr y))) 't)
                                             (if (ctx? (car (cons (sub x (car y))
                                                                  (sub x (cdr y)))))
                                                 't
                                                 (ctx? (cdr (cons (sub x (car y))
                                                                  (sub x (cdr y))))))))
                    ((A E E A A A 1 E 1) (cdr/cons (sub x (car y)) (sub x (cdr y))))
                    ((A E E A A A 1 E) (equal-if (ctx? (sub x (cdr y)))))
                    ((A E E A A A 1) (if-same (ctx? (car (cons (sub x (car y))
                                                             (sub x (cdr y))))) 't))
                    ((A E E A A A) (equal-same 't))
                    ((A E E A A) (if-same (ctx? y) 't))
                    ((A E E A) (if-same (equal (ctx? (sub x (cdr y))) 't) 't))
                    ((A E E E Q) (if-nest-E (ctx? (cdr y))
                                            (equal (ctx? (sub x (cdr y))) 't)
                                            't))
                    ((A E E E) (if-true (if (ctx? y)
                                            (equal (ctx? (sub x y)) 't)
                                            't)))
                    ((A E E E Q) (ctx? y))
                    ((A E E E Q) (if-nest-E (atom y)
                                            (equal y '?)
                                            (if (ctx? (car y))
                                                't
                                                (ctx? (cdr y)))))
                    ((A E E E Q) (if-nest-E (ctx? (car y)) 't (ctx? (cdr y))))
                    