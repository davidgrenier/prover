(include-book "j-bob-lang" :dir :teachpacks)

(include-book "j-bob" :dir :teachpacks)

;(include-book "little-prover" :dir :teachpacks)

(defun defun.memb? ()
  (J-Bob/define (prelude)
                '(((defun memb? (x)
                     (if (atom x)
                         'nil
                         (if (equal (car x) '?)
                             't
                             (memb? (cdr x)))))
                   (size x)
                   ((A E E) (size/cdr x))
                   ((A E) (if-same (equal (car x) '?) 't))
                   ((A) (if-same (atom x) 't))
                   ((Q) (natp/size x))
                   (() (if-true 't 'nil))))))

(defun defun.remb ()
  (J-Bob/define (defun.memb?)
                '(((defun remb (x)
                     (if (atom x)
                         '()
                         (if (equal (car x) '?)
                             (remb (cdr x))
                             (cons (car x)
                                   (remb (cdr x))))))
                   (size x)
                   ((A E) (size/cdr x))
                   ((A) (if-same (atom x) 't))
                   ((Q) (natp/size x))
                   (() (if-true 't 'nil))))))

(defun dethm.memb?/remb ()
  (J-Bob/define (defun.remb)
                '(((dethm memb?/remb (x)
                          (equal (memb? (remb x)) 'nil))
                   (list-induction x)
                   ((A 1 1) (remb x))
                   ((A 1 1) (if-nest-A (atom x) '()
                                       (if (equal (car x) '?)
                                           (remb (cdr x))
                                           (cons (car x) (remb (cdr x))))))
                   ((A 1) (memb? '()))
                   ((A 1 Q) (atom '()))
                   ((A 1) (if-true 'nil (if (equal (car '()) '?)
                                            't
                                            (memb? (cdr '())))))
                   ((A) (equal-same 'nil))
                   ((E A 1 1) (remb x))
                   ((E A 1 1) (if-nest-E (atom x) '()
                                         (if (equal (car x) '?)
                                             (remb (cdr x))
                                             (cons (car x) (remb (cdr x))))))
                   ((E A 1) (if-same (equal (car x) '?)
                                     (memb? (if (equal (car x) '?)
                                                (remb (cdr x))
                                                (cons (car x) (remb (cdr x)))))))
                   ((E A 1 A 1) (if-nest-A (equal (car x) '?)
                                           (remb (cdr x))
                                           (cons (car x) (remb (cdr x)))))
                   ((E A 1 A) (equal-if (memb? (remb (cdr x))) 'nil))
                   ((E A 1 E 1) (if-nest-E (equal (car x) '?)
                                           (remb (cdr x))
                                           (cons (car x) (remb (cdr x)))))
                   ((E A 1 E) (memb? (cons (car x) (remb (cdr x)))))
                   ((E A 1 E E E 1) (cdr/cons (car x) (remb (cdr x))))
                   ((E A 1 E E E) (equal-if (memb? (remb (cdr x))) 'nil))
                   ((E A 1 E E Q 1) (car/cons (car x) (remb (cdr x))))
                   ((E A 1 E E) (if-nest-E (equal (car x) '?) 't 'nil))
                   ((E A 1 E) (if-same (atom (cons (car x) (remb (cdr x)))) 'nil))
                   ((E A 1) (if-same (equal (car x) '?) 'nil))
                   ((E A) (equal-same 'nil))
                   ((E) (if-same (equal (memb? (remb (cdr x))) 'nil) 't))
                   (() (if-same (atom x) 't))))))